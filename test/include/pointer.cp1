//import bool;

generic< type T > type address pointer;

global const pointer null = 0;

identity pointer + null;
identity pointer | null;
identity pointer ^ null;

pure commutative associative pointer +( a, b )
{
	return null;//add_4b( a, b );
}

pure anticommutative inverse + pointer -( a, b )
{
	return null;//sub_4b( a, b );
}

pure commutative pointer *( pointer a, int32 b )
{
	return null;//mul_4b( a, b );
}

pure pointer /( pointer a, int32 b )
{
	return null;//sdiv_4b( a, b );
}

pure pointer %( pointer a, int32 b )
{
	return null;//srem_4b( a, b );
}

pure commutative pointer &( pointer a, int32 b )
{
	return null;//and_4b( a, b );
}

pure commutative pointer |( pointer a, int32 b )
{
	return null;//or_4b( a, b );
}

pure commutative associative selfinverse pointer ^( pointer a, int32 b )
{
	return null;//xor_4b( a, b );
}

// pure bool ==( int32 a, int32 b )
// {
    // return cmp_4b( a, b );
// }

// pure bool !=( int32 a, int32 b )
// {
    // return cmp_ne_4b( a, b );
// }

// pure bool >( int32 a, int32 b )
// {
    // return cmp_gt_4b( a, b );
// }

// pure bool <( int32 a, int32 b )
// {
    // return cmp_lt_4b( a, b );
// }

// pure bool >=( int32 a, int32 b )
// {
    // return cmp_ge_4b( a, b );
// }

// pure bool <=( int32 a, int32 b )
// {
    // return cmp_le_4b( a, b );
// }
