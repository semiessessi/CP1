/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <algorithm>
#include "Absyn.H"
typedef struct yy_buffer_state *YY_BUFFER_STATE;
int yyparse(void);
int yylex(void);
YY_BUFFER_STATE yy_scan_string(const char *str);
void yy_delete_buffer(YY_BUFFER_STATE buf);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}



static Code* YY_RESULT_Code_ = 0;
Code* pCode(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Code_;
  }
}
Code* pCode(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Code_;
  }
}

static TLDeclaration* YY_RESULT_TLDeclaration_ = 0;
TLDeclaration* pTLDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TLDeclaration_;
  }
}
TLDeclaration* pTLDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TLDeclaration_;
  }
}

static Declaration* YY_RESULT_Declaration_ = 0;
Declaration* pDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_;
  }
}
Declaration* pDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_;
  }
}

static Prototype* YY_RESULT_Prototype_ = 0;
Prototype* pPrototype(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prototype_;
  }
}
Prototype* pPrototype(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prototype_;
  }
}

static OperatorName* YY_RESULT_OperatorName_ = 0;
OperatorName* pOperatorName(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorName_;
  }
}
OperatorName* pOperatorName(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorName_;
  }
}

static OperatorTrait* YY_RESULT_OperatorTrait_ = 0;
OperatorTrait* pOperatorTrait(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorTrait_;
  }
}
OperatorTrait* pOperatorTrait(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorTrait_;
  }
}

static FunctionSpecifier* YY_RESULT_FunctionSpecifier_ = 0;
FunctionSpecifier* pFunctionSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctionSpecifier_;
  }
}
FunctionSpecifier* pFunctionSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctionSpecifier_;
  }
}

static ConversionSpecifier* YY_RESULT_ConversionSpecifier_ = 0;
ConversionSpecifier* pConversionSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConversionSpecifier_;
  }
}
ConversionSpecifier* pConversionSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConversionSpecifier_;
  }
}

static VariableSpecifier* YY_RESULT_VariableSpecifier_ = 0;
VariableSpecifier* pVariableSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VariableSpecifier_;
  }
}
VariableSpecifier* pVariableSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VariableSpecifier_;
  }
}

static TypeSpecifier* YY_RESULT_TypeSpecifier_ = 0;
TypeSpecifier* pTypeSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TypeSpecifier_;
  }
}
TypeSpecifier* pTypeSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TypeSpecifier_;
  }
}

static GenericParam* YY_RESULT_GenericParam_ = 0;
GenericParam* pGenericParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_GenericParam_;
  }
}
GenericParam* pGenericParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_GenericParam_;
  }
}

static Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}
Type* pType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

static StructMemberDeclaration* YY_RESULT_StructMemberDeclaration_ = 0;
StructMemberDeclaration* pStructMemberDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_StructMemberDeclaration_;
  }
}
StructMemberDeclaration* pStructMemberDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_StructMemberDeclaration_;
  }
}

static ParameterDeclaration* YY_RESULT_ParameterDeclaration_ = 0;
ParameterDeclaration* pParameterDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParameterDeclaration_;
  }
}
ParameterDeclaration* pParameterDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParameterDeclaration_;
  }
}

static Statement* YY_RESULT_Statement_ = 0;
Statement* pStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}
Statement* pStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}

static RValue* YY_RESULT_RValue_ = 0;
RValue* pRValue(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RValue_;
  }
}
RValue* pRValue(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RValue_;
  }
}

static Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}
Expression* pExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

static ListTLDeclaration* YY_RESULT_ListTLDeclaration_ = 0;
ListTLDeclaration* pListTLDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTLDeclaration_;
  }
}
ListTLDeclaration* pListTLDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTLDeclaration_;
  }
}

static ListDeclaration* YY_RESULT_ListDeclaration_ = 0;
ListDeclaration* pListDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_;
  }
}
ListDeclaration* pListDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_;
  }
}

static ListStatement* YY_RESULT_ListStatement_ = 0;
ListStatement* pListStatement(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}
ListStatement* pListStatement(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}

static ListTypeSpecifier* YY_RESULT_ListTypeSpecifier_ = 0;
ListTypeSpecifier* pListTypeSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTypeSpecifier_;
  }
}
ListTypeSpecifier* pListTypeSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTypeSpecifier_;
  }
}

static ListConversionSpecifier* YY_RESULT_ListConversionSpecifier_ = 0;
ListConversionSpecifier* pListConversionSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConversionSpecifier_;
  }
}
ListConversionSpecifier* pListConversionSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConversionSpecifier_;
  }
}

static ListFunctionSpecifier* YY_RESULT_ListFunctionSpecifier_ = 0;
ListFunctionSpecifier* pListFunctionSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunctionSpecifier_;
  }
}
ListFunctionSpecifier* pListFunctionSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunctionSpecifier_;
  }
}

static ListVariableSpecifier* YY_RESULT_ListVariableSpecifier_ = 0;
ListVariableSpecifier* pListVariableSpecifier(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListVariableSpecifier_;
  }
}
ListVariableSpecifier* pListVariableSpecifier(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListVariableSpecifier_;
  }
}

static ListStructMemberDeclaration* YY_RESULT_ListStructMemberDeclaration_ = 0;
ListStructMemberDeclaration* pListStructMemberDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStructMemberDeclaration_;
  }
}
ListStructMemberDeclaration* pListStructMemberDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStructMemberDeclaration_;
  }
}

static ListGenericParam* YY_RESULT_ListGenericParam_ = 0;
ListGenericParam* pListGenericParam(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGenericParam_;
  }
}
ListGenericParam* pListGenericParam(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGenericParam_;
  }
}

static ListParameterDeclaration* YY_RESULT_ListParameterDeclaration_ = 0;
ListParameterDeclaration* pListParameterDeclaration(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListParameterDeclaration_;
  }
}
ListParameterDeclaration* pListParameterDeclaration(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListParameterDeclaration_;
  }
}

static ListExpression* YY_RESULT_ListExpression_ = 0;
ListExpression* pListExpression(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}
ListExpression* pListExpression(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}

static ListType* YY_RESULT_ListType_ = 0;
ListType* pListType(FILE *inp)
{
  yy_mylinenumber = 1;
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}
ListType* pListType(const char *str)
{
  YY_BUFFER_STATE buf;
  int result;
  yy_mylinenumber = 1;
  initialize_lexer(0);
  buf = yy_scan_string(str);
  result = yyparse();
  yy_delete_buffer(buf);
  if (result)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListType_;
  }
}



%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Code* code_;
  TLDeclaration* tldeclaration_;
  Declaration* declaration_;
  Prototype* prototype_;
  OperatorName* operatorname_;
  OperatorTrait* operatortrait_;
  FunctionSpecifier* functionspecifier_;
  ConversionSpecifier* conversionspecifier_;
  VariableSpecifier* variablespecifier_;
  TypeSpecifier* typespecifier_;
  GenericParam* genericparam_;
  Type* type_;
  StructMemberDeclaration* structmemberdeclaration_;
  ParameterDeclaration* parameterdeclaration_;
  Statement* statement_;
  RValue* rvalue_;
  Expression* expression_;
  ListTLDeclaration* listtldeclaration_;
  ListDeclaration* listdeclaration_;
  ListStatement* liststatement_;
  ListTypeSpecifier* listtypespecifier_;
  ListConversionSpecifier* listconversionspecifier_;
  ListFunctionSpecifier* listfunctionspecifier_;
  ListVariableSpecifier* listvariablespecifier_;
  ListStructMemberDeclaration* liststructmemberdeclaration_;
  ListGenericParam* listgenericparam_;
  ListParameterDeclaration* listparameterdeclaration_;
  ListExpression* listexpression_;
  ListType* listtype_;

}


%token _ERROR_
%token _SYMB_0    //   ;
%token _SYMB_1    //   {
%token _SYMB_2    //   }
%token _SYMB_3    //   (
%token _SYMB_4    //   )
%token _SYMB_5    //   =
%token _SYMB_6    //   !
%token _SYMB_7    //   ++
%token _SYMB_8    //   --
%token _SYMB_9    //   ~
%token _SYMB_10    //   *
%token _SYMB_11    //   **
%token _SYMB_12    //   /
%token _SYMB_13    //   \
%token _SYMB_14    //   %
%token _SYMB_15    //   +
%token _SYMB_16    //   -
%token _SYMB_17    //   <<
%token _SYMB_18    //   >>
%token _SYMB_19    //   <
%token _SYMB_20    //   >
%token _SYMB_21    //   <=
%token _SYMB_22    //   >=
%token _SYMB_23    //   ==
%token _SYMB_24    //   !=
%token _SYMB_25    //   &
%token _SYMB_26    //   |
%token _SYMB_27    //   ^
%token _SYMB_28    //   &&
%token _SYMB_29    //   ||
%token _SYMB_30    //   ^^
%token _SYMB_31    //   ->
%token _SYMB_32    //   <-
%token _SYMB_33    //   [
%token _SYMB_34    //   ]
%token _SYMB_35    //   ..
%token _SYMB_36    //   .
%token _SYMB_37    //   ,
%token _SYMB_38    //   ?
%token _SYMB_39    //   :
%token _SYMB_40    //   +=
%token _SYMB_41    //   -=
%token _SYMB_42    //   *=
%token _SYMB_43    //   /=
%token _SYMB_44    //   %=
%token _SYMB_45    //   &=
%token _SYMB_46    //   |=
%token _SYMB_47    //   ^=
%token _SYMB_48    //   <<=
%token _SYMB_49    //   >>=
%token _SYMB_50    //   add
%token _SYMB_51    //   address
%token _SYMB_52    //   align
%token _SYMB_53    //   all
%token _SYMB_54    //   and
%token _SYMB_55    //   anticommutative
%token _SYMB_56    //   ashr
%token _SYMB_57    //   associative
%token _SYMB_58    //   break
%token _SYMB_59    //   breakpoint
%token _SYMB_60    //   byte
%token _SYMB_61    //   cast
%token _SYMB_62    //   cmp
%token _SYMB_63    //   cmp_ge
%token _SYMB_64    //   cmp_gt
%token _SYMB_65    //   cmp_le
%token _SYMB_66    //   cmp_lt
%token _SYMB_67    //   cmp_ne
%token _SYMB_68    //   commutative
%token _SYMB_69    //   const
%token _SYMB_70    //   continue
%token _SYMB_71    //   convert
%token _SYMB_72    //   convert_to
%token _SYMB_73    //   down
%token _SYMB_74    //   each
%token _SYMB_75    //   else
%token _SYMB_76    //   entrypoint
%token _SYMB_77    //   expose
%token _SYMB_78    //   extern
%token _SYMB_79    //   for
%token _SYMB_80    //   generic
%token _SYMB_81    //   identity
%token _SYMB_82    //   if
%token _SYMB_83    //   implicit
%token _SYMB_84    //   import
%token _SYMB_85    //   in
%token _SYMB_86    //   inline
%token _SYMB_87    //   integer
%token _SYMB_88    //   inverse
%token _SYMB_89    //   lshr
%token _SYMB_90    //   mul
%token _SYMB_91    //   namespace
%token _SYMB_92    //   neg
%token _SYMB_93    //   not
%token _SYMB_94    //   or
%token _SYMB_95    //   pi
%token _SYMB_96    //   pure
%token _SYMB_97    //   real
%token _SYMB_98    //   repeat
%token _SYMB_99    //   return
%token _SYMB_100    //   sdiv
%token _SYMB_101    //   selfinverse
%token _SYMB_102    //   shl
%token _SYMB_103    //   sign_extend
%token _SYMB_104    //   srem
%token _SYMB_105    //   sub
%token _SYMB_106    //   type
%token _SYMB_107    //   udiv
%token _SYMB_108    //   until
%token _SYMB_109    //   up
%token _SYMB_110    //   urem
%token _SYMB_111    //   where
%token _SYMB_112    //   while
%token _SYMB_113    //   xor
%token _SYMB_114    //   zero_extend
%token<string_> _SYMB_115    //   CString
%token<string_> _SYMB_116    //   CChar
%token<string_> _SYMB_117    //   Operator

%type <code_> Code
%type <tldeclaration_> TLDeclaration
%type <declaration_> Declaration
%type <prototype_> Prototype
%type <operatorname_> OperatorName
%type <operatortrait_> OperatorTrait
%type <functionspecifier_> FunctionSpecifier
%type <conversionspecifier_> ConversionSpecifier
%type <variablespecifier_> VariableSpecifier
%type <typespecifier_> TypeSpecifier
%type <genericparam_> GenericParam
%type <type_> Type
%type <structmemberdeclaration_> StructMemberDeclaration
%type <parameterdeclaration_> ParameterDeclaration
%type <statement_> Statement
%type <rvalue_> RValue
%type <expression_> Expression11
%type <expression_> Expression10
%type <expression_> Expression9
%type <expression_> Expression8
%type <expression_> Expression7
%type <expression_> Expression6
%type <expression_> Expression5
%type <expression_> Expression4
%type <expression_> Expression3
%type <expression_> Expression2
%type <expression_> Expression1
%type <expression_> Expression
%type <listtldeclaration_> ListTLDeclaration
%type <listdeclaration_> ListDeclaration
%type <liststatement_> ListStatement
%type <listtypespecifier_> ListTypeSpecifier
%type <listconversionspecifier_> ListConversionSpecifier
%type <listfunctionspecifier_> ListFunctionSpecifier
%type <listvariablespecifier_> ListVariableSpecifier
%type <liststructmemberdeclaration_> ListStructMemberDeclaration
%type <listgenericparam_> ListGenericParam
%type <listparameterdeclaration_> ListParameterDeclaration
%type <listexpression_> ListExpression
%type <listtype_> ListType

%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%glr-parser

%%
Code : ListTLDeclaration ListDeclaration {  $$ = new Main($1, $2); $$->line_number = yy_mylinenumber; YY_RESULT_Code_= $$; } 
;
TLDeclaration : _SYMB_84 _IDENT_ _SYMB_0 {  $$ = new DImport($2); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_77 _IDENT_ _SYMB_0 {  $$ = new DExpose($2); $$->line_number = yy_mylinenumber;  }
;
Declaration : _SYMB_91 _IDENT_ _SYMB_1 ListDeclaration _SYMB_2 {  $$ = new DNamespace($2, $4); $$->line_number = yy_mylinenumber;  } 
  | ListFunctionSpecifier _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  std::reverse($4->begin(),$4->end()) ;$$ = new DDefaultFunction($1, $2, $4, $7); $$->line_number = yy_mylinenumber;  }
  | ListFunctionSpecifier Type _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  std::reverse($5->begin(),$5->end()) ;$$ = new DFunction($1, $2, $3, $5, $8); $$->line_number = yy_mylinenumber;  }
  | ListFunctionSpecifier Type OperatorName _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  std::reverse($5->begin(),$5->end()) ;$$ = new DOperator($1, $2, $3, $5, $8); $$->line_number = yy_mylinenumber;  }
  | OperatorTrait _SYMB_0 {  $$ = new DOperatorInfo($1); $$->line_number = yy_mylinenumber;  }
  | ListTypeSpecifier _SYMB_106 Type _IDENT_ _SYMB_0 {  $$ = new DTypeDecl($1, $3, $4); $$->line_number = yy_mylinenumber;  }
  | Type ListConversionSpecifier _SYMB_71 _SYMB_3 _SYMB_69 Type _IDENT_ _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new DTypeConv($1, $2, $6, $7, $10); $$->line_number = yy_mylinenumber;  }
  | _SYMB_78 Prototype {  $$ = new DExtern($2); $$->line_number = yy_mylinenumber;  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_5 Expression _SYMB_0 {  $$ = new DIVariable($1, $2, $3, $5); $$->line_number = yy_mylinenumber;  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_0 {  $$ = new DVariable($1, $2, $3); $$->line_number = yy_mylinenumber;  }
;
Prototype : ListFunctionSpecifier Type _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_0 {  std::reverse($5->begin(),$5->end()) ;$$ = new PFunction($1, $2, $3, $5); $$->line_number = yy_mylinenumber;  } 
;
OperatorName : _SYMB_6 {  $$ = new ONLnot(); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_7 {  $$ = new ONPreInc(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_8 {  $$ = new ONPreDec(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_9 {  $$ = new ONBnot(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_10 {  $$ = new ONMul(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_11 {  $$ = new ONExp(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_12 {  $$ = new ONDiv(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_13 {  $$ = new ONRDiv(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_14 {  $$ = new ONMod(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_15 {  $$ = new ONAdd(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_16 {  $$ = new ONSub(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_17 {  $$ = new ONLSh(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_18 {  $$ = new ONRSh(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_19 {  $$ = new ONLT(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_20 {  $$ = new ONGT(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_21 {  $$ = new ONLE(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_22 {  $$ = new ONGE(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_23 {  $$ = new ONE(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_24 {  $$ = new ONNE(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_25 {  $$ = new ONBand(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_26 {  $$ = new ONBor(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_27 {  $$ = new ONBxor(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_28 {  $$ = new ONLand(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_29 {  $$ = new ONLor(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_30 {  $$ = new ONLxor(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_31 {  $$ = new ONRight(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_32 {  $$ = new ONLeft(); $$->line_number = yy_mylinenumber;  }
;
OperatorTrait : _SYMB_81 Type OperatorName Expression {  $$ = new OTIdentity($2, $3, $4); $$->line_number = yy_mylinenumber;  } 
;
FunctionSpecifier : _SYMB_76 {  $$ = new FSEntryPoint(); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_96 {  $$ = new FSPure(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_69 {  $$ = new FSConst(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_86 {  $$ = new FSInline(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_57 {  $$ = new FSAssociative(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_68 {  $$ = new FSCommutative(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_55 {  $$ = new FSAntiCommutative(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_88 OperatorName {  $$ = new FSInverse($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_101 {  $$ = new FSSelfInverse(); $$->line_number = yy_mylinenumber;  }
;
ConversionSpecifier : _SYMB_109 {  $$ = new CSUp(); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_73 {  $$ = new CSDown(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_83 {  $$ = new CSImplicit(); $$->line_number = yy_mylinenumber;  }
;
VariableSpecifier : _SYMB_69 {  $$ = new VSConst(); $$->line_number = yy_mylinenumber;  } 
;
TypeSpecifier : _SYMB_52 _SYMB_19 _INTEGER_ _SYMB_20 {  $$ = new TSAlign($3); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_80 _SYMB_19 ListGenericParam _SYMB_20 {  std::reverse($3->begin(),$3->end()) ;$$ = new TSGeneric($3); $$->line_number = yy_mylinenumber;  }
  | _SYMB_87 {  $$ = new TSInteger(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_97 {  $$ = new TSReal(); $$->line_number = yy_mylinenumber;  }
;
GenericParam : Type _IDENT_ {  $$ = new TSGParam($1, $2); $$->line_number = yy_mylinenumber;  } 
;
Type : _SYMB_51 {  $$ = new TAddress(); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_60 {  $$ = new TByte(); $$->line_number = yy_mylinenumber;  }
  | _IDENT_ {  $$ = new TCustom($1); $$->line_number = yy_mylinenumber;  }
  | Type _SYMB_33 _INTEGER_ _SYMB_34 {  $$ = new TFixedArray($1, $3); $$->line_number = yy_mylinenumber;  }
  | Type _SYMB_33 _SYMB_34 {  $$ = new TGenericArray($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_33 Type _SYMB_34 {  $$ = new TList($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_33 Type _SYMB_35 _SYMB_34 {  $$ = new TInfiniteList($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_1 ListStructMemberDeclaration _SYMB_0 _SYMB_2 {  $$ = new TStruct($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_3 ListType _SYMB_4 _SYMB_31 Type {  std::reverse($2->begin(),$2->end()) ;$$ = new TFunction($2, $5); $$->line_number = yy_mylinenumber;  }
  | _SYMB_106 {  $$ = new TType(); $$->line_number = yy_mylinenumber;  }
;
StructMemberDeclaration : Type _IDENT_ _SYMB_0 {  $$ = new SMDMemberDeclaration($1, $2); $$->line_number = yy_mylinenumber;  } 
;
ParameterDeclaration : ListVariableSpecifier _IDENT_ {  $$ = new PDAutoParameter($1, $2); $$->line_number = yy_mylinenumber;  } 
  | ListVariableSpecifier Type _IDENT_ {  $$ = new PDTypedParameter($1, $2, $3); $$->line_number = yy_mylinenumber;  }
;
Statement : _SYMB_99 Expression _SYMB_0 {  $$ = new SReturn($2); $$->line_number = yy_mylinenumber;  } 
  | Expression _SYMB_0 {  $$ = new SExpression($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_1 ListStatement _SYMB_2 {  $$ = new SScope($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_82 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SIf($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_82 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 _SYMB_75 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SIfElse($3, $6, $10); $$->line_number = yy_mylinenumber;  }
  | _SYMB_98 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SLoop($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_112 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SWhile($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_108 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SUntil($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_79 _SYMB_3 ListExpression _SYMB_0 Expression _SYMB_0 ListExpression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  std::reverse($3->begin(),$3->end()) ; std::reverse($7->begin(),$7->end()) ;$$ = new SFor($3, $5, $7, $10); $$->line_number = yy_mylinenumber;  }
  | _SYMB_79 _SYMB_74 _SYMB_3 _IDENT_ _SYMB_85 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SForEach($4, $6, $9); $$->line_number = yy_mylinenumber;  }
  | _SYMB_79 _SYMB_53 _SYMB_3 _IDENT_ _SYMB_85 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 {  $$ = new SForAll($4, $6, $9); $$->line_number = yy_mylinenumber;  }
  | _SYMB_58 _SYMB_0 {  $$ = new SBreak(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_70 _SYMB_0 {  $$ = new SContinue(); $$->line_number = yy_mylinenumber;  }
  | _SYMB_59 _SYMB_0 {  $$ = new SBreakpoint(); $$->line_number = yy_mylinenumber;  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_5 Expression _SYMB_0 {  $$ = new SIVariable($1, $2, $3, $5); $$->line_number = yy_mylinenumber;  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_0 {  $$ = new SVariable($1, $2, $3); $$->line_number = yy_mylinenumber;  }
;
RValue : _IDENT_ {  $$ = new RVIdent($1); $$->line_number = yy_mylinenumber;  } 
  | _IDENT_ _SYMB_36 RValue {  $$ = new RVQualified($1, $3); $$->line_number = yy_mylinenumber;  }
;
Expression11 : _DOUBLE_ {  $$ = new EDouble($1); $$->line_number = yy_mylinenumber;  } 
  | _INTEGER_ {  $$ = new EInteger($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_115 {  $$ = new EString($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_116 {  $$ = new EChar($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_95 {  $$ = new EPi(); $$->line_number = yy_mylinenumber;  }
  | RValue {  $$ = new ERValue($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_3 Expression _SYMB_4 {  $$ = $2;  }
;
Expression10 : _SYMB_1 ListExpression _SYMB_2 {  std::reverse($2->begin(),$2->end()) ;$$ = new EArray($2); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_33 ListExpression _SYMB_34 {  std::reverse($2->begin(),$2->end()) ;$$ = new EList($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_1 Expression _SYMB_111 ListExpression _SYMB_2 {  std::reverse($4->begin(),$4->end()) ;$$ = new EAComp($2, $4); $$->line_number = yy_mylinenumber;  }
  | _SYMB_33 Expression _SYMB_111 ListExpression _SYMB_34 {  std::reverse($4->begin(),$4->end()) ;$$ = new ELComp($2, $4); $$->line_number = yy_mylinenumber;  }
  | Expression _SYMB_33 Expression _SYMB_34 {  $$ = new EIndex($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_3 _SYMB_4 {  $$ = new ESimpleCall($1); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_3 ListExpression _SYMB_4 {  std::reverse($3->begin(),$3->end()) ;$$ = new ECall($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_7 {  $$ = new EPostInc($1); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_8 {  $$ = new EPostDec($1); $$->line_number = yy_mylinenumber;  }
  | _SYMB_25 Expression11 {  $$ = new EAddress($2); $$->line_number = yy_mylinenumber;  }
  | Expression10 _SYMB_32 Expression11 {  $$ = new ELeft($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression10 _SYMB_31 Expression11 {  $$ = new ERight($1, $3); $$->line_number = yy_mylinenumber;  }
  | _SYMB_103 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinSExt($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_114 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinZExt($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_61 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinCast($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_72 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinConvert($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_50 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinAddI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_105 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinSubI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_90 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinMulI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_107 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinUdivI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_100 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinSdivI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_110 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinUremI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_104 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinSremI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_54 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinAndI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_94 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinOrI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_113 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinXorI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_102 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinShlI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_89 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinLshrI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_56 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinAshrI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_93 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinNotI($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_92 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 {  $$ = new EIntrinNegI($3, $6); $$->line_number = yy_mylinenumber;  }
  | _SYMB_62 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCEqI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_67 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCNeI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_66 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCLtI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_64 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCGtI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_65 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCLeI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | _SYMB_63 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_37 Expression _SYMB_4 {  $$ = new EIntrinCGeI($3, $6, $8); $$->line_number = yy_mylinenumber;  }
  | Expression11 {  $$ = $1;  }
;
Expression9 : _SYMB_6 Expression10 {  $$ = new ELnot($2); $$->line_number = yy_mylinenumber;  } 
  | _SYMB_7 RValue {  $$ = new EPreInc($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_8 RValue {  $$ = new EPreDec($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_16 Expression10 {  $$ = new ENeg($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_9 Expression10 {  $$ = new EBnot($2); $$->line_number = yy_mylinenumber;  }
  | _SYMB_15 Expression10 {  $$ = new EPos($2); $$->line_number = yy_mylinenumber;  }
  | Expression10 {  $$ = $1;  }
;
Expression8 : Expression8 _SYMB_10 Expression9 {  $$ = new EMul($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression8 _SYMB_11 Expression9 {  $$ = new EMulA($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression8 _SYMB_12 Expression9 {  $$ = new EDiv($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression8 _SYMB_14 Expression9 {  $$ = new EMod($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression9 {  $$ = $1;  }
;
Expression7 : Expression7 _SYMB_15 Expression8 {  $$ = new EAdd($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression7 _SYMB_16 Expression8 {  $$ = new ESub($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression7 _SYMB_7 Expression8 {  $$ = new EAddA($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression7 _SYMB_8 Expression8 {  $$ = new ESubA($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression8 {  $$ = $1;  }
;
Expression6 : Expression6 _SYMB_17 Expression7 {  $$ = new ELSh($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression6 _SYMB_18 Expression7 {  $$ = new ERSh($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression7 {  $$ = $1;  }
;
Expression5 : Expression6 _SYMB_19 Expression6 {  $$ = new ELT($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression6 _SYMB_20 Expression6 {  $$ = new EGT($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression6 _SYMB_21 Expression6 {  $$ = new ELE($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression6 _SYMB_22 Expression6 {  $$ = new EGE($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression6 {  $$ = $1;  }
;
Expression4 : Expression5 _SYMB_23 Expression5 {  $$ = new EE($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression5 _SYMB_24 Expression5 {  $$ = new ENE($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression5 {  $$ = $1;  }
;
Expression3 : Expression3 _SYMB_25 Expression4 {  $$ = new EBand($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression3 _SYMB_26 Expression4 {  $$ = new EBor($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression3 _SYMB_27 Expression4 {  $$ = new EBxor($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression4 {  $$ = $1;  }
;
Expression2 : Expression3 _SYMB_28 Expression3 {  $$ = new ELand($1, $3); $$->line_number = yy_mylinenumber;  } 
  | Expression3 _SYMB_29 Expression3 {  $$ = new ELor($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression3 _SYMB_30 Expression3 {  $$ = new ELxor($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression3 {  $$ = $1;  }
;
Expression1 : Expression2 _SYMB_38 Expression2 _SYMB_39 Expression2 {  $$ = new EConditional($1, $3, $5); $$->line_number = yy_mylinenumber;  } 
  | Expression2 {  $$ = $1;  }
;
Expression : RValue _SYMB_5 Expression {  $$ = new EAssign($1, $3); $$->line_number = yy_mylinenumber;  } 
  | RValue _SYMB_40 Expression {  $$ = new EAddAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_41 Expression {  $$ = new ESubAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_42 Expression {  $$ = new EMulAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_43 Expression {  $$ = new EDivAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_44 Expression {  $$ = new EModAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_45 Expression {  $$ = new EAndAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_46 Expression {  $$ = new EOrAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_47 Expression {  $$ = new EXorAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_48 Expression {  $$ = new ELShAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | RValue _SYMB_49 Expression {  $$ = new ERShAssign($1, $3); $$->line_number = yy_mylinenumber;  }
  | Expression1 {  $$ = $1;  }
;
ListTLDeclaration : /* empty */ {  $$ = new ListTLDeclaration();  } 
  | ListTLDeclaration TLDeclaration {  $1->push_back($2) ; $$ = $1 ;  }
;
ListDeclaration : /* empty */ {  $$ = new ListDeclaration();  } 
  | ListDeclaration Declaration {  $1->push_back($2) ; $$ = $1 ;  }
;
ListStatement : /* empty */ {  $$ = new ListStatement();  } 
  | ListStatement Statement {  $1->push_back($2) ; $$ = $1 ;  }
;
ListTypeSpecifier : /* empty */ {  $$ = new ListTypeSpecifier();  } 
  | ListTypeSpecifier TypeSpecifier {  $1->push_back($2) ; $$ = $1 ;  }
;
ListConversionSpecifier : /* empty */ {  $$ = new ListConversionSpecifier();  } 
  | ListConversionSpecifier ConversionSpecifier {  $1->push_back($2) ; $$ = $1 ;  }
;
ListFunctionSpecifier : /* empty */ {  $$ = new ListFunctionSpecifier();  } 
  | ListFunctionSpecifier FunctionSpecifier {  $1->push_back($2) ; $$ = $1 ;  }
;
ListVariableSpecifier : /* empty */ {  $$ = new ListVariableSpecifier();  } 
  | ListVariableSpecifier VariableSpecifier {  $1->push_back($2) ; $$ = $1 ;  }
;
ListStructMemberDeclaration : /* empty */ {  $$ = new ListStructMemberDeclaration();  } 
  | ListStructMemberDeclaration StructMemberDeclaration {  $1->push_back($2) ; $$ = $1 ;  }
;
ListGenericParam : GenericParam {  $$ = new ListGenericParam() ; $$->push_back($1);  } 
  | GenericParam _SYMB_37 ListGenericParam {  $3->push_back($1) ; $$ = $3 ;  }
;
ListParameterDeclaration : /* empty */ {  $$ = new ListParameterDeclaration();  } 
  | ParameterDeclaration {  $$ = new ListParameterDeclaration() ; $$->push_back($1);  }
  | ParameterDeclaration _SYMB_37 ListParameterDeclaration {  $3->push_back($1) ; $$ = $3 ;  }
;
ListExpression : Expression {  $$ = new ListExpression() ; $$->push_back($1);  } 
  | Expression _SYMB_37 ListExpression {  $3->push_back($1) ; $$ = $3 ;  }
;
ListType : /* empty */ {  $$ = new ListType();  } 
  | Type {  $$ = new ListType() ; $$->push_back($1);  }
  | Type _SYMB_37 ListType {  $3->push_back($1) ; $$ = $3 ;  }
;

