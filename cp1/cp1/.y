/* This Bison file was machine-generated by BNFC */
%{
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <iostream>
#include "Absyn.H"
int yyparse(void);
int yylex(void);
int yy_mylinenumber;
int initialize_lexer(FILE * inp);
int yywrap(void)
{
  return 1;
}
void yyerror(const char *str)
{
  std::cout << "line " << yy_mylinenumber + 1 << std::endl ;
  fprintf(stderr,"error: %s\n",str);
}


Code* YY_RESULT_Code_ = 0;
Code* pCode(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Code_;
  }
}

TLDeclaration* YY_RESULT_TLDeclaration_ = 0;
TLDeclaration* pTLDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TLDeclaration_;
  }
}

Declaration* YY_RESULT_Declaration_ = 0;
Declaration* pDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Declaration_;
  }
}

Prototype* YY_RESULT_Prototype_ = 0;
Prototype* pPrototype(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Prototype_;
  }
}

OperatorName* YY_RESULT_OperatorName_ = 0;
OperatorName* pOperatorName(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorName_;
  }
}

OperatorTrait* YY_RESULT_OperatorTrait_ = 0;
OperatorTrait* pOperatorTrait(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_OperatorTrait_;
  }
}

FunctionSpecifier* YY_RESULT_FunctionSpecifier_ = 0;
FunctionSpecifier* pFunctionSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_FunctionSpecifier_;
  }
}

ConversionSpecifier* YY_RESULT_ConversionSpecifier_ = 0;
ConversionSpecifier* pConversionSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ConversionSpecifier_;
  }
}

VariableSpecifier* YY_RESULT_VariableSpecifier_ = 0;
VariableSpecifier* pVariableSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_VariableSpecifier_;
  }
}

TypeSpecifier* YY_RESULT_TypeSpecifier_ = 0;
TypeSpecifier* pTypeSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_TypeSpecifier_;
  }
}

GenericParam* YY_RESULT_GenericParam_ = 0;
GenericParam* pGenericParam(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_GenericParam_;
  }
}

Type* YY_RESULT_Type_ = 0;
Type* pType(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Type_;
  }
}

StructMemberDeclaration* YY_RESULT_StructMemberDeclaration_ = 0;
StructMemberDeclaration* pStructMemberDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_StructMemberDeclaration_;
  }
}

ParameterDeclaration* YY_RESULT_ParameterDeclaration_ = 0;
ParameterDeclaration* pParameterDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ParameterDeclaration_;
  }
}

Statement* YY_RESULT_Statement_ = 0;
Statement* pStatement(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Statement_;
  }
}

RValue* YY_RESULT_RValue_ = 0;
RValue* pRValue(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_RValue_;
  }
}

Expression* YY_RESULT_Expression_ = 0;
Expression* pExpression(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_Expression_;
  }
}

ListTLDeclaration* YY_RESULT_ListTLDeclaration_ = 0;
ListTLDeclaration* pListTLDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTLDeclaration_;
  }
}

ListDeclaration* YY_RESULT_ListDeclaration_ = 0;
ListDeclaration* pListDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListDeclaration_;
  }
}

ListStatement* YY_RESULT_ListStatement_ = 0;
ListStatement* pListStatement(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStatement_;
  }
}

ListTypeSpecifier* YY_RESULT_ListTypeSpecifier_ = 0;
ListTypeSpecifier* pListTypeSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListTypeSpecifier_;
  }
}

ListConversionSpecifier* YY_RESULT_ListConversionSpecifier_ = 0;
ListConversionSpecifier* pListConversionSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListConversionSpecifier_;
  }
}

ListFunctionSpecifier* YY_RESULT_ListFunctionSpecifier_ = 0;
ListFunctionSpecifier* pListFunctionSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListFunctionSpecifier_;
  }
}

ListVariableSpecifier* YY_RESULT_ListVariableSpecifier_ = 0;
ListVariableSpecifier* pListVariableSpecifier(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListVariableSpecifier_;
  }
}

ListStructMemberDeclaration* YY_RESULT_ListStructMemberDeclaration_ = 0;
ListStructMemberDeclaration* pListStructMemberDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListStructMemberDeclaration_;
  }
}

ListGenericParam* YY_RESULT_ListGenericParam_ = 0;
ListGenericParam* pListGenericParam(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListGenericParam_;
  }
}

ListParameterDeclaration* YY_RESULT_ListParameterDeclaration_ = 0;
ListParameterDeclaration* pListParameterDeclaration(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListParameterDeclaration_;
  }
}

ListExpression* YY_RESULT_ListExpression_ = 0;
ListExpression* pListExpression(FILE *inp)
{
  initialize_lexer(inp);
  if (yyparse())
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return YY_RESULT_ListExpression_;
  }
}


ListTLDeclaration* reverseListTLDeclaration(ListTLDeclaration *l)
{
  ListTLDeclaration *prev = 0;
  ListTLDeclaration *tmp = 0;
  while (l)
  {
    tmp = l->listtldeclaration_;
    l->listtldeclaration_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListDeclaration* reverseListDeclaration(ListDeclaration *l)
{
  ListDeclaration *prev = 0;
  ListDeclaration *tmp = 0;
  while (l)
  {
    tmp = l->listdeclaration_;
    l->listdeclaration_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStatement* reverseListStatement(ListStatement *l)
{
  ListStatement *prev = 0;
  ListStatement *tmp = 0;
  while (l)
  {
    tmp = l->liststatement_;
    l->liststatement_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListTypeSpecifier* reverseListTypeSpecifier(ListTypeSpecifier *l)
{
  ListTypeSpecifier *prev = 0;
  ListTypeSpecifier *tmp = 0;
  while (l)
  {
    tmp = l->listtypespecifier_;
    l->listtypespecifier_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListConversionSpecifier* reverseListConversionSpecifier(ListConversionSpecifier *l)
{
  ListConversionSpecifier *prev = 0;
  ListConversionSpecifier *tmp = 0;
  while (l)
  {
    tmp = l->listconversionspecifier_;
    l->listconversionspecifier_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListFunctionSpecifier* reverseListFunctionSpecifier(ListFunctionSpecifier *l)
{
  ListFunctionSpecifier *prev = 0;
  ListFunctionSpecifier *tmp = 0;
  while (l)
  {
    tmp = l->listfunctionspecifier_;
    l->listfunctionspecifier_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListVariableSpecifier* reverseListVariableSpecifier(ListVariableSpecifier *l)
{
  ListVariableSpecifier *prev = 0;
  ListVariableSpecifier *tmp = 0;
  while (l)
  {
    tmp = l->listvariablespecifier_;
    l->listvariablespecifier_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListStructMemberDeclaration* reverseListStructMemberDeclaration(ListStructMemberDeclaration *l)
{
  ListStructMemberDeclaration *prev = 0;
  ListStructMemberDeclaration *tmp = 0;
  while (l)
  {
    tmp = l->liststructmemberdeclaration_;
    l->liststructmemberdeclaration_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListGenericParam* reverseListGenericParam(ListGenericParam *l)
{
  ListGenericParam *prev = 0;
  ListGenericParam *tmp = 0;
  while (l)
  {
    tmp = l->listgenericparam_;
    l->listgenericparam_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListParameterDeclaration* reverseListParameterDeclaration(ListParameterDeclaration *l)
{
  ListParameterDeclaration *prev = 0;
  ListParameterDeclaration *tmp = 0;
  while (l)
  {
    tmp = l->listparameterdeclaration_;
    l->listparameterdeclaration_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}
ListExpression* reverseListExpression(ListExpression *l)
{
  ListExpression *prev = 0;
  ListExpression *tmp = 0;
  while (l)
  {
    tmp = l->listexpression_;
    l->listexpression_ = prev;
    prev = l;
    l = tmp;
  }
  return prev;
}

%}

%union
{
  int int_;
  char char_;
  double double_;
  char* string_;
  Code* code_;
  TLDeclaration* tldeclaration_;
  Declaration* declaration_;
  Prototype* prototype_;
  OperatorName* operatorname_;
  OperatorTrait* operatortrait_;
  FunctionSpecifier* functionspecifier_;
  ConversionSpecifier* conversionspecifier_;
  VariableSpecifier* variablespecifier_;
  TypeSpecifier* typespecifier_;
  GenericParam* genericparam_;
  Type* type_;
  StructMemberDeclaration* structmemberdeclaration_;
  ParameterDeclaration* parameterdeclaration_;
  Statement* statement_;
  RValue* rvalue_;
  Expression* expression_;
  ListTLDeclaration* listtldeclaration_;
  ListDeclaration* listdeclaration_;
  ListStatement* liststatement_;
  ListTypeSpecifier* listtypespecifier_;
  ListConversionSpecifier* listconversionspecifier_;
  ListFunctionSpecifier* listfunctionspecifier_;
  ListVariableSpecifier* listvariablespecifier_;
  ListStructMemberDeclaration* liststructmemberdeclaration_;
  ListGenericParam* listgenericparam_;
  ListParameterDeclaration* listparameterdeclaration_;
  ListExpression* listexpression_;

}

%token _ERROR_
%token _SYMB_0    //   ;
%token _SYMB_1    //   {
%token _SYMB_2    //   }
%token _SYMB_3    //   (
%token _SYMB_4    //   )
%token _SYMB_5    //   =
%token _SYMB_6    //   !
%token _SYMB_7    //   ++
%token _SYMB_8    //   --
%token _SYMB_9    //   ~
%token _SYMB_10    //   *
%token _SYMB_11    //   **
%token _SYMB_12    //   /
%token _SYMB_13    //   \
%token _SYMB_14    //   %
%token _SYMB_15    //   +
%token _SYMB_16    //   -
%token _SYMB_17    //   <<
%token _SYMB_18    //   >>
%token _SYMB_19    //   <
%token _SYMB_20    //   >
%token _SYMB_21    //   <=
%token _SYMB_22    //   >=
%token _SYMB_23    //   ==
%token _SYMB_24    //   !=
%token _SYMB_25    //   &
%token _SYMB_26    //   |
%token _SYMB_27    //   ^
%token _SYMB_28    //   &&
%token _SYMB_29    //   ||
%token _SYMB_30    //   ^^
%token _SYMB_31    //   ->
%token _SYMB_32    //   <-
%token _SYMB_33    //   [
%token _SYMB_34    //   ]
%token _SYMB_35    //   .
%token _SYMB_36    //   ,
%token _SYMB_37    //   ?
%token _SYMB_38    //   :
%token _SYMB_39    //   +=
%token _SYMB_40    //   -=
%token _SYMB_41    //   *=
%token _SYMB_42    //   /=
%token _SYMB_43    //   %=
%token _SYMB_44    //   &=
%token _SYMB_45    //   |=
%token _SYMB_46    //   ^=
%token _SYMB_47    //   <<=
%token _SYMB_48    //   >>=
%token _SYMB_49    //   add
%token _SYMB_50    //   add_2b
%token _SYMB_51    //   add_2f
%token _SYMB_52    //   add_4b
%token _SYMB_53    //   add_4f
%token _SYMB_54    //   add_4f4
%token _SYMB_55    //   add_8b
%token _SYMB_56    //   add_8f
%token _SYMB_57    //   add_b
%token _SYMB_58    //   add_b4
%token _SYMB_59    //   add_b8
%token _SYMB_60    //   address
%token _SYMB_61    //   align
%token _SYMB_62    //   all
%token _SYMB_63    //   and
%token _SYMB_64    //   and_2b
%token _SYMB_65    //   and_4b
%token _SYMB_66    //   and_8b
%token _SYMB_67    //   and_b
%token _SYMB_68    //   anticommutative
%token _SYMB_69    //   ashr
%token _SYMB_70    //   ashr_2b
%token _SYMB_71    //   ashr_4b
%token _SYMB_72    //   ashr_8b
%token _SYMB_73    //   ashr_b
%token _SYMB_74    //   ashr_b4
%token _SYMB_75    //   ashr_b8
%token _SYMB_76    //   associative
%token _SYMB_77    //   break
%token _SYMB_78    //   breakpoint
%token _SYMB_79    //   byte
%token _SYMB_80    //   cmp
%token _SYMB_81    //   cmp_2b
%token _SYMB_82    //   cmp_4b
%token _SYMB_83    //   cmp_8b
%token _SYMB_84    //   cmp_b
%token _SYMB_85    //   cmp_ge
%token _SYMB_86    //   cmp_ge_2b
%token _SYMB_87    //   cmp_ge_4b
%token _SYMB_88    //   cmp_ge_8b
%token _SYMB_89    //   cmp_ge_b
%token _SYMB_90    //   cmp_gt
%token _SYMB_91    //   cmp_gt_2b
%token _SYMB_92    //   cmp_gt_4b
%token _SYMB_93    //   cmp_gt_8b
%token _SYMB_94    //   cmp_gt_b
%token _SYMB_95    //   cmp_le
%token _SYMB_96    //   cmp_le_2b
%token _SYMB_97    //   cmp_le_4b
%token _SYMB_98    //   cmp_le_8b
%token _SYMB_99    //   cmp_le_b
%token _SYMB_100    //   cmp_lt
%token _SYMB_101    //   cmp_lt_2b
%token _SYMB_102    //   cmp_lt_4b
%token _SYMB_103    //   cmp_lt_8b
%token _SYMB_104    //   cmp_lt_b
%token _SYMB_105    //   cmp_ne
%token _SYMB_106    //   cmp_ne_2b
%token _SYMB_107    //   cmp_ne_4b
%token _SYMB_108    //   cmp_ne_8b
%token _SYMB_109    //   cmp_ne_b
%token _SYMB_110    //   commutative
%token _SYMB_111    //   const
%token _SYMB_112    //   continue
%token _SYMB_113    //   convert
%token _SYMB_114    //   div_2f
%token _SYMB_115    //   div_4f
%token _SYMB_116    //   div_4f4
%token _SYMB_117    //   div_8f
%token _SYMB_118    //   down
%token _SYMB_119    //   each
%token _SYMB_120    //   else
%token _SYMB_121    //   entrypoint
%token _SYMB_122    //   expose
%token _SYMB_123    //   extern
%token _SYMB_124    //   for
%token _SYMB_125    //   generic
%token _SYMB_126    //   identity
%token _SYMB_127    //   if
%token _SYMB_128    //   implicit
%token _SYMB_129    //   import
%token _SYMB_130    //   in
%token _SYMB_131    //   inline
%token _SYMB_132    //   integer
%token _SYMB_133    //   inverse
%token _SYMB_134    //   lshr
%token _SYMB_135    //   lshr_2b
%token _SYMB_136    //   lshr_4b
%token _SYMB_137    //   lshr_8b
%token _SYMB_138    //   lshr_b
%token _SYMB_139    //   lshr_b4
%token _SYMB_140    //   lshr_b8
%token _SYMB_141    //   mul
%token _SYMB_142    //   mul_2b
%token _SYMB_143    //   mul_2f
%token _SYMB_144    //   mul_4b
%token _SYMB_145    //   mul_4f
%token _SYMB_146    //   mul_4f4
%token _SYMB_147    //   mul_8b
%token _SYMB_148    //   mul_8f
%token _SYMB_149    //   mul_b
%token _SYMB_150    //   mul_b4
%token _SYMB_151    //   mul_b8
%token _SYMB_152    //   namespace
%token _SYMB_153    //   neg
%token _SYMB_154    //   neg_2b
%token _SYMB_155    //   neg_4b
%token _SYMB_156    //   neg_8b
%token _SYMB_157    //   neg_b
%token _SYMB_158    //   neg_b4
%token _SYMB_159    //   neg_b8
%token _SYMB_160    //   not
%token _SYMB_161    //   not_2b
%token _SYMB_162    //   not_4b
%token _SYMB_163    //   not_8b
%token _SYMB_164    //   not_b
%token _SYMB_165    //   or
%token _SYMB_166    //   or_2b
%token _SYMB_167    //   or_4b
%token _SYMB_168    //   or_8b
%token _SYMB_169    //   or_b
%token _SYMB_170    //   pi
%token _SYMB_171    //   pure
%token _SYMB_172    //   real
%token _SYMB_173    //   rem_2f
%token _SYMB_174    //   rem_4f
%token _SYMB_175    //   rem_4f4
%token _SYMB_176    //   rem_8f
%token _SYMB_177    //   repeat
%token _SYMB_178    //   return
%token _SYMB_179    //   sdiv
%token _SYMB_180    //   sdiv_2b
%token _SYMB_181    //   sdiv_4b
%token _SYMB_182    //   sdiv_8b
%token _SYMB_183    //   sdiv_b
%token _SYMB_184    //   sdiv_b4
%token _SYMB_185    //   sdiv_b8
%token _SYMB_186    //   selfinverse
%token _SYMB_187    //   shl
%token _SYMB_188    //   shl_2b
%token _SYMB_189    //   shl_4b
%token _SYMB_190    //   shl_8b
%token _SYMB_191    //   shl_b
%token _SYMB_192    //   shl_b4
%token _SYMB_193    //   shl_b8
%token _SYMB_194    //   sign_extend
%token _SYMB_195    //   srem
%token _SYMB_196    //   srem_2b
%token _SYMB_197    //   srem_4b
%token _SYMB_198    //   srem_8b
%token _SYMB_199    //   srem_b
%token _SYMB_200    //   srem_b4
%token _SYMB_201    //   srem_b8
%token _SYMB_202    //   sub
%token _SYMB_203    //   sub_2b
%token _SYMB_204    //   sub_2f
%token _SYMB_205    //   sub_4b
%token _SYMB_206    //   sub_4f
%token _SYMB_207    //   sub_4f4
%token _SYMB_208    //   sub_8b
%token _SYMB_209    //   sub_8f
%token _SYMB_210    //   sub_b
%token _SYMB_211    //   sub_b4
%token _SYMB_212    //   sub_b8
%token _SYMB_213    //   type
%token _SYMB_214    //   udiv
%token _SYMB_215    //   udiv_2b
%token _SYMB_216    //   udiv_4b
%token _SYMB_217    //   udiv_8b
%token _SYMB_218    //   udiv_b
%token _SYMB_219    //   udiv_b4
%token _SYMB_220    //   udiv_b8
%token _SYMB_221    //   until
%token _SYMB_222    //   up
%token _SYMB_223    //   urem
%token _SYMB_224    //   urem_2b
%token _SYMB_225    //   urem_4b
%token _SYMB_226    //   urem_8b
%token _SYMB_227    //   urem_b
%token _SYMB_228    //   urem_b4
%token _SYMB_229    //   urem_b8
%token _SYMB_230    //   where
%token _SYMB_231    //   while
%token _SYMB_232    //   xor
%token _SYMB_233    //   xor_2b
%token _SYMB_234    //   xor_4b
%token _SYMB_235    //   xor_8b
%token _SYMB_236    //   xor_b
%token _SYMB_237    //   zero_extend
%token<string_> _SYMB_238    //   CString
%token<string_> _SYMB_239    //   CChar
%token<string_> _SYMB_240    //   Operator

%type <code_> Code
%type <tldeclaration_> TLDeclaration
%type <declaration_> Declaration
%type <prototype_> Prototype
%type <operatorname_> OperatorName
%type <operatortrait_> OperatorTrait
%type <functionspecifier_> FunctionSpecifier
%type <conversionspecifier_> ConversionSpecifier
%type <variablespecifier_> VariableSpecifier
%type <typespecifier_> TypeSpecifier
%type <genericparam_> GenericParam
%type <type_> Type
%type <structmemberdeclaration_> StructMemberDeclaration
%type <parameterdeclaration_> ParameterDeclaration
%type <statement_> Statement
%type <rvalue_> RValue
%type <expression_> Expression11
%type <expression_> Expression10
%type <expression_> Expression9
%type <expression_> Expression8
%type <expression_> Expression7
%type <expression_> Expression6
%type <expression_> Expression5
%type <expression_> Expression4
%type <expression_> Expression3
%type <expression_> Expression2
%type <expression_> Expression1
%type <expression_> Expression
%type <listtldeclaration_> ListTLDeclaration
%type <listdeclaration_> ListDeclaration
%type <liststatement_> ListStatement
%type <listtypespecifier_> ListTypeSpecifier
%type <listconversionspecifier_> ListConversionSpecifier
%type <listfunctionspecifier_> ListFunctionSpecifier
%type <listvariablespecifier_> ListVariableSpecifier
%type <liststructmemberdeclaration_> ListStructMemberDeclaration
%type <listgenericparam_> ListGenericParam
%type <listparameterdeclaration_> ListParameterDeclaration
%type <listexpression_> ListExpression

%token<int_> _INTEGER_
%token<double_> _DOUBLE_
%token<string_> _IDENT_

%glr-parser

%%
Code : ListTLDeclaration ListDeclaration { $$ = new Main(reverseListTLDeclaration($1), reverseListDeclaration($2)); YY_RESULT_Code_= $$; } 
;
TLDeclaration : _SYMB_129 _IDENT_ _SYMB_0 { $$ = new DImport($2);  } 
  | _SYMB_122 _IDENT_ _SYMB_0 { $$ = new DExpose($2);  }
;
Declaration : _SYMB_152 _IDENT_ _SYMB_1 ListDeclaration _SYMB_2 { $$ = new DNamespace($2, reverseListDeclaration($4));  } 
  | ListFunctionSpecifier _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new DDefaultFunction(reverseListFunctionSpecifier($1), $2, $4, reverseListStatement($7));  }
  | ListFunctionSpecifier Type _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new DFunction(reverseListFunctionSpecifier($1), $2, $3, $5, reverseListStatement($8));  }
  | ListFunctionSpecifier Type OperatorName _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new DOperator(reverseListFunctionSpecifier($1), $2, $3, $5, reverseListStatement($8));  }
  | OperatorTrait _SYMB_0 { $$ = new DOperatorInfo($1);  }
  | ListTypeSpecifier _SYMB_213 Type _IDENT_ _SYMB_0 { $$ = new DTypeDecl(reverseListTypeSpecifier($1), $3, $4);  }
  | Type ListConversionSpecifier _SYMB_113 _SYMB_3 _SYMB_111 Type _IDENT_ _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new DTypeConv($1, reverseListConversionSpecifier($2), $6, $7, reverseListStatement($10));  }
  | _SYMB_123 Prototype { $$ = new DExtern($2);  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_5 Expression _SYMB_0 { $$ = new DIVariable(reverseListVariableSpecifier($1), $2, $3, $5);  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_0 { $$ = new DVariable(reverseListVariableSpecifier($1), $2, $3);  }
;
Prototype : ListFunctionSpecifier Type _IDENT_ _SYMB_3 ListParameterDeclaration _SYMB_4 _SYMB_0 { $$ = new PFunction(reverseListFunctionSpecifier($1), $2, $3, $5);  } 
;
OperatorName : _SYMB_6 { $$ = new ONLnot();  } 
  | _SYMB_7 { $$ = new ONPreInc();  }
  | _SYMB_8 { $$ = new ONPreDec();  }
  | _SYMB_9 { $$ = new ONBnot();  }
  | _SYMB_10 { $$ = new ONMul();  }
  | _SYMB_11 { $$ = new ONExp();  }
  | _SYMB_12 { $$ = new ONDiv();  }
  | _SYMB_13 { $$ = new ONRDiv();  }
  | _SYMB_14 { $$ = new ONMod();  }
  | _SYMB_15 { $$ = new ONAdd();  }
  | _SYMB_16 { $$ = new ONSub();  }
  | _SYMB_17 { $$ = new ONLSh();  }
  | _SYMB_18 { $$ = new ONRSh();  }
  | _SYMB_19 { $$ = new ONLT();  }
  | _SYMB_20 { $$ = new ONGT();  }
  | _SYMB_21 { $$ = new ONLE();  }
  | _SYMB_22 { $$ = new ONGE();  }
  | _SYMB_23 { $$ = new ONE();  }
  | _SYMB_24 { $$ = new ONNE();  }
  | _SYMB_25 { $$ = new ONBand();  }
  | _SYMB_26 { $$ = new ONBor();  }
  | _SYMB_27 { $$ = new ONBxor();  }
  | _SYMB_28 { $$ = new ONLand();  }
  | _SYMB_29 { $$ = new ONLor();  }
  | _SYMB_30 { $$ = new ONLxor();  }
  | _SYMB_31 { $$ = new ONRight();  }
  | _SYMB_32 { $$ = new ONLeft();  }
;
OperatorTrait : _SYMB_126 Type OperatorName Expression { $$ = new OTIdentity($2, $3, $4);  } 
;
FunctionSpecifier : _SYMB_121 { $$ = new FSEntryPoint();  } 
  | _SYMB_171 { $$ = new FSPure();  }
  | _SYMB_131 { $$ = new FSInline();  }
  | _SYMB_76 { $$ = new FSAssociative();  }
  | _SYMB_110 { $$ = new FSCommutative();  }
  | _SYMB_68 { $$ = new FSAntiCommutative();  }
  | _SYMB_133 OperatorName { $$ = new FSInverse($2);  }
  | _SYMB_186 { $$ = new FSSelfInverse();  }
;
ConversionSpecifier : _SYMB_222 { $$ = new CSUp();  } 
  | _SYMB_118 { $$ = new CSDown();  }
  | _SYMB_128 { $$ = new CSImplicit();  }
;
VariableSpecifier : _SYMB_111 { $$ = new VSConst();  } 
;
TypeSpecifier : _SYMB_61 _SYMB_19 _INTEGER_ _SYMB_20 { $$ = new TSAlign($3);  } 
  | _SYMB_125 _SYMB_19 ListGenericParam _SYMB_20 { $$ = new TSGeneric($3);  }
  | _SYMB_132 { $$ = new TSInteger();  }
  | _SYMB_172 { $$ = new TSReal();  }
;
GenericParam : Type _IDENT_ { $$ = new TSGParam($1, $2);  } 
;
Type : _SYMB_60 { $$ = new TAddress();  } 
  | _SYMB_79 { $$ = new TByte();  }
  | _IDENT_ { $$ = new TCustom($1);  }
  | Type _SYMB_33 _INTEGER_ _SYMB_34 { $$ = new TFixedArray($1, $3);  }
  | Type _SYMB_33 _SYMB_34 { $$ = new TGenericArray($1);  }
  | _SYMB_1 ListStructMemberDeclaration _SYMB_0 _SYMB_2 { $$ = new TStruct(reverseListStructMemberDeclaration($2));  }
  | _SYMB_213 { $$ = new TType();  }
;
StructMemberDeclaration : Type _IDENT_ _SYMB_0 { $$ = new SMDMemberDeclaration($1, $2);  } 
;
ParameterDeclaration : ListVariableSpecifier _IDENT_ { $$ = new PDAutoParameter(reverseListVariableSpecifier($1), $2);  } 
  | ListVariableSpecifier Type _IDENT_ { $$ = new PDTypedParameter(reverseListVariableSpecifier($1), $2, $3);  }
;
Statement : _SYMB_178 Expression _SYMB_0 { $$ = new SReturn($2);  } 
  | Expression _SYMB_0 { $$ = new SExpression($1);  }
  | _SYMB_1 ListStatement _SYMB_2 { $$ = new SScope(reverseListStatement($2));  }
  | _SYMB_127 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SIf($3, reverseListStatement($6));  }
  | _SYMB_127 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 _SYMB_120 _SYMB_1 ListStatement _SYMB_2 { $$ = new SIfElse($3, reverseListStatement($6), reverseListStatement($10));  }
  | _SYMB_177 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SLoop($3, reverseListStatement($6));  }
  | _SYMB_231 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SWhile($3, reverseListStatement($6));  }
  | _SYMB_221 _SYMB_3 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SUntil($3, reverseListStatement($6));  }
  | _SYMB_124 _SYMB_3 ListExpression _SYMB_0 Expression _SYMB_0 ListExpression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SFor($3, $5, $7, reverseListStatement($10));  }
  | _SYMB_124 _SYMB_119 _SYMB_3 _IDENT_ _SYMB_130 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SForEach($4, $6, reverseListStatement($9));  }
  | _SYMB_124 _SYMB_62 _SYMB_3 _IDENT_ _SYMB_130 Expression _SYMB_4 _SYMB_1 ListStatement _SYMB_2 { $$ = new SForAll($4, $6, reverseListStatement($9));  }
  | _SYMB_77 _SYMB_0 { $$ = new SBreak();  }
  | _SYMB_112 _SYMB_0 { $$ = new SContinue();  }
  | _SYMB_78 _SYMB_0 { $$ = new SBreakpoint();  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_5 Expression _SYMB_0 { $$ = new SIVariable(reverseListVariableSpecifier($1), $2, $3, $5);  }
  | ListVariableSpecifier Type _IDENT_ _SYMB_0 { $$ = new SVariable(reverseListVariableSpecifier($1), $2, $3);  }
;
RValue : _IDENT_ { $$ = new RVIdent($1);  } 
  | _IDENT_ _SYMB_35 RValue { $$ = new RVQualified($1, $3);  }
;
Expression11 : _DOUBLE_ { $$ = new EDouble($1);  } 
  | _INTEGER_ { $$ = new EInteger($1);  }
  | _SYMB_238 { $$ = new EString($1);  }
  | _SYMB_239 { $$ = new EChar($1);  }
  | _SYMB_170 { $$ = new EPi();  }
  | RValue { $$ = new ERValue($1);  }
  | _SYMB_3 Expression _SYMB_4 { $$ = $2;  }
;
Expression10 : _SYMB_1 ListExpression _SYMB_2 { $$ = new EArray($2);  } 
  | _SYMB_33 ListExpression _SYMB_34 { $$ = new EList($2);  }
  | _SYMB_1 Expression _SYMB_230 ListExpression _SYMB_2 { $$ = new EAComp($2, $4);  }
  | _SYMB_33 Expression _SYMB_230 ListExpression _SYMB_34 { $$ = new ELComp($2, $4);  }
  | Expression _SYMB_33 Expression _SYMB_34 { $$ = new EIndex($1, $3);  }
  | RValue _SYMB_3 _SYMB_4 { $$ = new ESimpleCall($1);  }
  | RValue _SYMB_3 ListExpression _SYMB_4 { $$ = new ECall($1, $3);  }
  | RValue _SYMB_7 { $$ = new EPostInc($1);  }
  | RValue _SYMB_8 { $$ = new EPostDec($1);  }
  | _SYMB_25 Expression11 { $$ = new EAddress($2);  }
  | _SYMB_194 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinSExt($3, $6);  }
  | _SYMB_237 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinZExt($3, $6);  }
  | _SYMB_49 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAddI($3, $6, $8);  }
  | _SYMB_202 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSubI($3, $6, $8);  }
  | _SYMB_141 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMulI($3, $6, $8);  }
  | _SYMB_214 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdivI($3, $6, $8);  }
  | _SYMB_179 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdivI($3, $6, $8);  }
  | _SYMB_223 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUremI($3, $6, $8);  }
  | _SYMB_195 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSremI($3, $6, $8);  }
  | _SYMB_63 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAndI($3, $6, $8);  }
  | _SYMB_165 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinOrI($3, $6, $8);  }
  | _SYMB_232 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinXorI($3, $6, $8);  }
  | _SYMB_187 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShlI($3, $6, $8);  }
  | _SYMB_134 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshrI($3, $6, $8);  }
  | _SYMB_69 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshrI($3, $6, $8);  }
  | _SYMB_160 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNotI($3, $6);  }
  | _SYMB_153 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNegI($3, $6);  }
  | _SYMB_80 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCEqI($3, $6, $8);  }
  | _SYMB_105 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCNeI($3, $6, $8);  }
  | _SYMB_100 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLtI($3, $6, $8);  }
  | _SYMB_90 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGtI($3, $6, $8);  }
  | _SYMB_95 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLeI($3, $6, $8);  }
  | _SYMB_85 _SYMB_19 Type _SYMB_20 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGeI($3, $6, $8);  }
  | _SYMB_57 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAddB($3, $5);  }
  | _SYMB_210 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSubB($3, $5);  }
  | _SYMB_149 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMulB($3, $5);  }
  | _SYMB_218 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdivB($3, $5);  }
  | _SYMB_183 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdivB($3, $5);  }
  | _SYMB_227 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUremB($3, $5);  }
  | _SYMB_199 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSremB($3, $5);  }
  | _SYMB_67 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAndB($3, $5);  }
  | _SYMB_169 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinOrB($3, $5);  }
  | _SYMB_236 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinXorB($3, $5);  }
  | _SYMB_191 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShlB($3, $5);  }
  | _SYMB_138 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshrB($3, $5);  }
  | _SYMB_73 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshrB($3, $5);  }
  | _SYMB_164 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNotB($3);  }
  | _SYMB_157 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNegB($3);  }
  | _SYMB_84 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCEqB($3, $5);  }
  | _SYMB_109 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCNeB($3, $5);  }
  | _SYMB_104 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLtB($3, $5);  }
  | _SYMB_94 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGtB($3, $5);  }
  | _SYMB_99 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLeB($3, $5);  }
  | _SYMB_89 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGeB($3, $5);  }
  | _SYMB_50 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd2B($3, $5);  }
  | _SYMB_203 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub2B($3, $5);  }
  | _SYMB_142 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul2B($3, $5);  }
  | _SYMB_215 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv2B($3, $5);  }
  | _SYMB_180 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdiv2B($3, $5);  }
  | _SYMB_224 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem2B($3, $5);  }
  | _SYMB_196 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSrem2B($3, $5);  }
  | _SYMB_64 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAnd2B($3, $5);  }
  | _SYMB_166 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinOr2B($3, $5);  }
  | _SYMB_233 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinXor2B($3, $5);  }
  | _SYMB_188 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShl2B($3, $5);  }
  | _SYMB_135 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshr2B($3, $5);  }
  | _SYMB_70 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshr2B($3, $5);  }
  | _SYMB_161 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNot2B($3);  }
  | _SYMB_154 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNeg2B($3);  }
  | _SYMB_81 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCEq2B($3, $5);  }
  | _SYMB_106 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCNe2B($3, $5);  }
  | _SYMB_101 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLt2B($3, $5);  }
  | _SYMB_91 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGt2B($3, $5);  }
  | _SYMB_96 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLe2B($3, $5);  }
  | _SYMB_86 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGe2B($3, $5);  }
  | _SYMB_52 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd4B($3, $5);  }
  | _SYMB_205 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub4B($3, $5);  }
  | _SYMB_144 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul4B($3, $5);  }
  | _SYMB_216 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv4B($3, $5);  }
  | _SYMB_181 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdiv4B($3, $5);  }
  | _SYMB_225 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem4B($3, $5);  }
  | _SYMB_197 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSrem4B($3, $5);  }
  | _SYMB_65 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAnd4B($3, $5);  }
  | _SYMB_167 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinOr4B($3, $5);  }
  | _SYMB_234 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinXor4B($3, $5);  }
  | _SYMB_189 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShl4B($3, $5);  }
  | _SYMB_136 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshr4B($3, $5);  }
  | _SYMB_71 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshr4B($3, $5);  }
  | _SYMB_162 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNot4B($3);  }
  | _SYMB_155 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNeg4B($3);  }
  | _SYMB_82 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCEq4B($3, $5);  }
  | _SYMB_107 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCNe4B($3, $5);  }
  | _SYMB_102 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLt4B($3, $5);  }
  | _SYMB_92 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGt4B($3, $5);  }
  | _SYMB_97 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLe4B($3, $5);  }
  | _SYMB_87 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGe4B($3, $5);  }
  | _SYMB_55 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd8B($3, $5);  }
  | _SYMB_208 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub8B($3, $5);  }
  | _SYMB_147 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul8B($3, $5);  }
  | _SYMB_217 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv8B($3, $5);  }
  | _SYMB_182 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdiv8B($3, $5);  }
  | _SYMB_226 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem8B($3, $5);  }
  | _SYMB_198 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSrem8B($3, $5);  }
  | _SYMB_66 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAnd8B($3, $5);  }
  | _SYMB_168 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinOr8B($3, $5);  }
  | _SYMB_235 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinXor8B($3, $5);  }
  | _SYMB_190 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShl8B($3, $5);  }
  | _SYMB_137 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshr8B($3, $5);  }
  | _SYMB_72 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshr8B($3, $5);  }
  | _SYMB_163 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNot8B($3);  }
  | _SYMB_156 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNeg8B($3);  }
  | _SYMB_83 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCEq8B($3, $5);  }
  | _SYMB_108 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCNe8B($3, $5);  }
  | _SYMB_103 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLt8B($3, $5);  }
  | _SYMB_93 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGt8B($3, $5);  }
  | _SYMB_98 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCLe8B($3, $5);  }
  | _SYMB_88 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinCGe8B($3, $5);  }
  | _SYMB_58 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAddB4V($3, $5);  }
  | _SYMB_211 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSubB4V($3, $5);  }
  | _SYMB_150 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMulB4V($3, $5);  }
  | _SYMB_219 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdivB4V($3, $5);  }
  | _SYMB_184 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdivB4V($3, $5);  }
  | _SYMB_228 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUremB4V($3, $5);  }
  | _SYMB_200 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSremB4V($3, $5);  }
  | _SYMB_192 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShlB4V($3, $5);  }
  | _SYMB_139 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshrB4V($3, $5);  }
  | _SYMB_74 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshrB4V($3, $5);  }
  | _SYMB_158 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNegB4V($3);  }
  | _SYMB_59 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAddB8V($3, $5);  }
  | _SYMB_212 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSubB8V($3, $5);  }
  | _SYMB_151 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMulB8V($3, $5);  }
  | _SYMB_220 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdivB8V($3, $5);  }
  | _SYMB_185 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSdivB8V($3, $5);  }
  | _SYMB_229 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUremB8V($3, $5);  }
  | _SYMB_201 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSremB8V($3, $5);  }
  | _SYMB_193 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinShlB8V($3, $5);  }
  | _SYMB_140 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinLshrB8V($3, $5);  }
  | _SYMB_75 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAshrB8V($3, $5);  }
  | _SYMB_159 _SYMB_3 Expression _SYMB_4 { $$ = new EIntrinNegB8V($3);  }
  | _SYMB_51 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd2F($3, $5);  }
  | _SYMB_204 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub2F($3, $5);  }
  | _SYMB_143 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul2F($3, $5);  }
  | _SYMB_114 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv2F($3, $5);  }
  | _SYMB_173 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem2F($3, $5);  }
  | _SYMB_53 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd4F($3, $5);  }
  | _SYMB_206 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub4F($3, $5);  }
  | _SYMB_145 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul4F($3, $5);  }
  | _SYMB_115 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv4F($3, $5);  }
  | _SYMB_174 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem4F($3, $5);  }
  | _SYMB_56 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd8F($3, $5);  }
  | _SYMB_209 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub8F($3, $5);  }
  | _SYMB_148 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul8F($3, $5);  }
  | _SYMB_117 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv8F($3, $5);  }
  | _SYMB_176 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem8F($3, $5);  }
  | _SYMB_54 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinAdd4F4V($3, $5);  }
  | _SYMB_207 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinSub4F4V($3, $5);  }
  | _SYMB_146 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinMul4F4V($3, $5);  }
  | _SYMB_116 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUdiv4F4V($3, $5);  }
  | _SYMB_175 _SYMB_3 Expression _SYMB_36 Expression _SYMB_4 { $$ = new EIntrinUrem4F4V($3, $5);  }
  | Expression11 { $$ = $1;  }
;
Expression9 : _SYMB_6 Expression10 { $$ = new ELnot($2);  } 
  | _SYMB_7 RValue { $$ = new EPreInc($2);  }
  | _SYMB_8 RValue { $$ = new EPreDec($2);  }
  | _SYMB_16 Expression10 { $$ = new ENeg($2);  }
  | _SYMB_9 Expression10 { $$ = new EBnot($2);  }
  | _SYMB_15 Expression10 { $$ = new EPos($2);  }
  | Expression10 { $$ = $1;  }
;
Expression8 : Expression8 _SYMB_10 Expression9 { $$ = new EMul($1, $3);  } 
  | Expression8 _SYMB_12 Expression9 { $$ = new EDiv($1, $3);  }
  | Expression8 _SYMB_14 Expression9 { $$ = new EMod($1, $3);  }
  | Expression9 { $$ = $1;  }
;
Expression7 : Expression7 _SYMB_15 Expression8 { $$ = new EAdd($1, $3);  } 
  | Expression7 _SYMB_16 Expression8 { $$ = new ESub($1, $3);  }
  | Expression8 { $$ = $1;  }
;
Expression6 : Expression6 _SYMB_17 Expression7 { $$ = new ELSh($1, $3);  } 
  | Expression6 _SYMB_18 Expression7 { $$ = new ERSh($1, $3);  }
  | Expression7 { $$ = $1;  }
;
Expression5 : Expression6 _SYMB_19 Expression6 { $$ = new ELT($1, $3);  } 
  | Expression6 _SYMB_20 Expression6 { $$ = new EGT($1, $3);  }
  | Expression6 _SYMB_21 Expression6 { $$ = new ELE($1, $3);  }
  | Expression6 _SYMB_22 Expression6 { $$ = new EGE($1, $3);  }
  | Expression6 { $$ = $1;  }
;
Expression4 : Expression5 _SYMB_23 Expression5 { $$ = new EE($1, $3);  } 
  | Expression5 _SYMB_24 Expression5 { $$ = new ENE($1, $3);  }
  | Expression5 { $$ = $1;  }
;
Expression3 : Expression3 _SYMB_25 Expression4 { $$ = new EBand($1, $3);  } 
  | Expression3 _SYMB_26 Expression4 { $$ = new EBor($1, $3);  }
  | Expression3 _SYMB_27 Expression4 { $$ = new EBxor($1, $3);  }
  | Expression4 { $$ = $1;  }
;
Expression2 : Expression3 _SYMB_28 Expression3 { $$ = new ELand($1, $3);  } 
  | Expression3 _SYMB_29 Expression3 { $$ = new ELor($1, $3);  }
  | Expression3 _SYMB_30 Expression3 { $$ = new ELxor($1, $3);  }
  | Expression3 { $$ = $1;  }
;
Expression1 : Expression2 _SYMB_37 Expression2 _SYMB_38 Expression2 { $$ = new EConditional($1, $3, $5);  } 
  | Expression2 { $$ = $1;  }
;
Expression : RValue _SYMB_5 Expression { $$ = new EAssign($1, $3);  } 
  | RValue _SYMB_39 Expression { $$ = new EAddAssign($1, $3);  }
  | RValue _SYMB_40 Expression { $$ = new ESubAssign($1, $3);  }
  | RValue _SYMB_41 Expression { $$ = new EMulAssign($1, $3);  }
  | RValue _SYMB_42 Expression { $$ = new EDivAssign($1, $3);  }
  | RValue _SYMB_43 Expression { $$ = new EModAssign($1, $3);  }
  | RValue _SYMB_44 Expression { $$ = new EAndAssign($1, $3);  }
  | RValue _SYMB_45 Expression { $$ = new EOrAssign($1, $3);  }
  | RValue _SYMB_46 Expression { $$ = new EXorAssign($1, $3);  }
  | RValue _SYMB_47 Expression { $$ = new ELShAssign($1, $3);  }
  | RValue _SYMB_48 Expression { $$ = new ERShAssign($1, $3);  }
  | Expression1 { $$ = $1;  }
;
ListTLDeclaration : /* empty */ { $$ = 0;  } 
  | ListTLDeclaration TLDeclaration { $$ = new ListTLDeclaration($2, $1);  }
;
ListDeclaration : /* empty */ { $$ = 0;  } 
  | ListDeclaration Declaration { $$ = new ListDeclaration($2, $1);  }
;
ListStatement : /* empty */ { $$ = 0;  } 
  | ListStatement Statement { $$ = new ListStatement($2, $1);  }
;
ListTypeSpecifier : /* empty */ { $$ = 0;  } 
  | ListTypeSpecifier TypeSpecifier { $$ = new ListTypeSpecifier($2, $1);  }
;
ListConversionSpecifier : /* empty */ { $$ = 0;  } 
  | ListConversionSpecifier ConversionSpecifier { $$ = new ListConversionSpecifier($2, $1);  }
;
ListFunctionSpecifier : /* empty */ { $$ = 0;  } 
  | ListFunctionSpecifier FunctionSpecifier { $$ = new ListFunctionSpecifier($2, $1);  }
;
ListVariableSpecifier : /* empty */ { $$ = 0;  } 
  | ListVariableSpecifier VariableSpecifier { $$ = new ListVariableSpecifier($2, $1);  }
;
ListStructMemberDeclaration : /* empty */ { $$ = 0;  } 
  | ListStructMemberDeclaration StructMemberDeclaration { $$ = new ListStructMemberDeclaration($2, $1);  }
;
ListGenericParam : GenericParam { $$ = new ListGenericParam($1);  } 
  | GenericParam _SYMB_36 ListGenericParam { $$ = new ListGenericParam($1, $3);  }
;
ListParameterDeclaration : /* empty */ { $$ = 0;  } 
  | ParameterDeclaration { $$ = new ListParameterDeclaration($1);  }
  | ParameterDeclaration _SYMB_36 ListParameterDeclaration { $$ = new ListParameterDeclaration($1, $3);  }
;
ListExpression : Expression { $$ = new ListExpression($1);  } 
  | Expression _SYMB_36 ListExpression { $$ = new ListExpression($1, $3);  }
;

