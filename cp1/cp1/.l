/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
#define YY_BUFFER_LENGTH 4096
extern int yy_mylinenumber ;
char YY_PARSED_STRING[YY_BUFFER_LENGTH];
void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
void YY_BUFFER_RESET(void)
{
  for(int x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>";"      	 return _SYMB_0;
<YYINITIAL>"{"      	 return _SYMB_1;
<YYINITIAL>"}"      	 return _SYMB_2;
<YYINITIAL>"("      	 return _SYMB_3;
<YYINITIAL>")"      	 return _SYMB_4;
<YYINITIAL>"="      	 return _SYMB_5;
<YYINITIAL>"!"      	 return _SYMB_6;
<YYINITIAL>"++"      	 return _SYMB_7;
<YYINITIAL>"--"      	 return _SYMB_8;
<YYINITIAL>"~"      	 return _SYMB_9;
<YYINITIAL>"*"      	 return _SYMB_10;
<YYINITIAL>"**"      	 return _SYMB_11;
<YYINITIAL>"/"      	 return _SYMB_12;
<YYINITIAL>"\\"      	 return _SYMB_13;
<YYINITIAL>"%"      	 return _SYMB_14;
<YYINITIAL>"+"      	 return _SYMB_15;
<YYINITIAL>"-"      	 return _SYMB_16;
<YYINITIAL>"<<"      	 return _SYMB_17;
<YYINITIAL>">>"      	 return _SYMB_18;
<YYINITIAL>"<"      	 return _SYMB_19;
<YYINITIAL>">"      	 return _SYMB_20;
<YYINITIAL>"<="      	 return _SYMB_21;
<YYINITIAL>">="      	 return _SYMB_22;
<YYINITIAL>"=="      	 return _SYMB_23;
<YYINITIAL>"!="      	 return _SYMB_24;
<YYINITIAL>"&"      	 return _SYMB_25;
<YYINITIAL>"|"      	 return _SYMB_26;
<YYINITIAL>"^"      	 return _SYMB_27;
<YYINITIAL>"&&"      	 return _SYMB_28;
<YYINITIAL>"||"      	 return _SYMB_29;
<YYINITIAL>"^^"      	 return _SYMB_30;
<YYINITIAL>"->"      	 return _SYMB_31;
<YYINITIAL>"<-"      	 return _SYMB_32;
<YYINITIAL>"["      	 return _SYMB_33;
<YYINITIAL>"]"      	 return _SYMB_34;
<YYINITIAL>".."      	 return _SYMB_35;
<YYINITIAL>"."      	 return _SYMB_36;
<YYINITIAL>","      	 return _SYMB_37;
<YYINITIAL>"?"      	 return _SYMB_38;
<YYINITIAL>":"      	 return _SYMB_39;
<YYINITIAL>"+="      	 return _SYMB_40;
<YYINITIAL>"-="      	 return _SYMB_41;
<YYINITIAL>"*="      	 return _SYMB_42;
<YYINITIAL>"/="      	 return _SYMB_43;
<YYINITIAL>"%="      	 return _SYMB_44;
<YYINITIAL>"&="      	 return _SYMB_45;
<YYINITIAL>"|="      	 return _SYMB_46;
<YYINITIAL>"^="      	 return _SYMB_47;
<YYINITIAL>"<<="      	 return _SYMB_48;
<YYINITIAL>">>="      	 return _SYMB_49;
<YYINITIAL>"add"      	 return _SYMB_50;
<YYINITIAL>"address"      	 return _SYMB_51;
<YYINITIAL>"align"      	 return _SYMB_52;
<YYINITIAL>"all"      	 return _SYMB_53;
<YYINITIAL>"and"      	 return _SYMB_54;
<YYINITIAL>"anticommutative"      	 return _SYMB_55;
<YYINITIAL>"ashr"      	 return _SYMB_56;
<YYINITIAL>"associative"      	 return _SYMB_57;
<YYINITIAL>"break"      	 return _SYMB_58;
<YYINITIAL>"breakpoint"      	 return _SYMB_59;
<YYINITIAL>"byte"      	 return _SYMB_60;
<YYINITIAL>"cast"      	 return _SYMB_61;
<YYINITIAL>"cmp"      	 return _SYMB_62;
<YYINITIAL>"cmp_ge"      	 return _SYMB_63;
<YYINITIAL>"cmp_gt"      	 return _SYMB_64;
<YYINITIAL>"cmp_le"      	 return _SYMB_65;
<YYINITIAL>"cmp_lt"      	 return _SYMB_66;
<YYINITIAL>"cmp_ne"      	 return _SYMB_67;
<YYINITIAL>"commutative"      	 return _SYMB_68;
<YYINITIAL>"const"      	 return _SYMB_69;
<YYINITIAL>"continue"      	 return _SYMB_70;
<YYINITIAL>"convert"      	 return _SYMB_71;
<YYINITIAL>"convert_to"      	 return _SYMB_72;
<YYINITIAL>"down"      	 return _SYMB_73;
<YYINITIAL>"each"      	 return _SYMB_74;
<YYINITIAL>"else"      	 return _SYMB_75;
<YYINITIAL>"entrypoint"      	 return _SYMB_76;
<YYINITIAL>"expose"      	 return _SYMB_77;
<YYINITIAL>"extern"      	 return _SYMB_78;
<YYINITIAL>"for"      	 return _SYMB_79;
<YYINITIAL>"generic"      	 return _SYMB_80;
<YYINITIAL>"identity"      	 return _SYMB_81;
<YYINITIAL>"if"      	 return _SYMB_82;
<YYINITIAL>"implicit"      	 return _SYMB_83;
<YYINITIAL>"import"      	 return _SYMB_84;
<YYINITIAL>"in"      	 return _SYMB_85;
<YYINITIAL>"inline"      	 return _SYMB_86;
<YYINITIAL>"integer"      	 return _SYMB_87;
<YYINITIAL>"inverse"      	 return _SYMB_88;
<YYINITIAL>"lshr"      	 return _SYMB_89;
<YYINITIAL>"mul"      	 return _SYMB_90;
<YYINITIAL>"namespace"      	 return _SYMB_91;
<YYINITIAL>"neg"      	 return _SYMB_92;
<YYINITIAL>"not"      	 return _SYMB_93;
<YYINITIAL>"or"      	 return _SYMB_94;
<YYINITIAL>"pi"      	 return _SYMB_95;
<YYINITIAL>"pure"      	 return _SYMB_96;
<YYINITIAL>"real"      	 return _SYMB_97;
<YYINITIAL>"repeat"      	 return _SYMB_98;
<YYINITIAL>"return"      	 return _SYMB_99;
<YYINITIAL>"sdiv"      	 return _SYMB_100;
<YYINITIAL>"selfinverse"      	 return _SYMB_101;
<YYINITIAL>"shl"      	 return _SYMB_102;
<YYINITIAL>"sign_extend"      	 return _SYMB_103;
<YYINITIAL>"srem"      	 return _SYMB_104;
<YYINITIAL>"sub"      	 return _SYMB_105;
<YYINITIAL>"type"      	 return _SYMB_106;
<YYINITIAL>"udiv"      	 return _SYMB_107;
<YYINITIAL>"until"      	 return _SYMB_108;
<YYINITIAL>"up"      	 return _SYMB_109;
<YYINITIAL>"urem"      	 return _SYMB_110;
<YYINITIAL>"where"      	 return _SYMB_111;
<YYINITIAL>"while"      	 return _SYMB_112;
<YYINITIAL>"xor"      	 return _SYMB_113;
<YYINITIAL>"zero_extend"      	 return _SYMB_114;

<YYINITIAL>"//"[^\n]*\n  ++yy_mylinenumber ; 	 /* BNFC single-line comment */;
<YYINITIAL>"/*"      	 BEGIN COMMENT;
<COMMENT>"*/"      	 BEGIN YYINITIAL; return 0;
<COMMENT>.      	 /* BNFC multi-line comment */;
<COMMENT>[\n]   ++yy_mylinenumber ; 	 /* BNFC multi-line comment */;

<YYINITIAL>\".*\"     	 yylval.string_ = strdup(yytext); return _SYMB_115;
<YYINITIAL>'\\?.'     	 yylval.string_ = strdup(yytext); return _SYMB_116;
<YYINITIAL>(\+|\-|\=|\&|\^|\||\/|\%|\*|\>|\<|\!|\~|\?|\:)(\+|\-|\=|\&|\^|\||\/|\%|\*|\>|\<|\!|\~|\?|\:)(\+|\-|\=|\&|\^|\||\/|\%|\*|\>|\<|\!|\~|\?|\:)+     	 yylval.string_ = strdup(yytext); return _SYMB_117;
<YYINITIAL>{DIGIT}+"."{DIGIT}+("e"(\-)?{DIGIT}+)?      	 yylval.double_ = atof(yytext); return _DOUBLE_;
<YYINITIAL>{DIGIT}+      	 yylval.int_ = atoi(yytext); return _INTEGER_;
<YYINITIAL>{LETTER}{IDENT}*      	 yylval.string_ = strdup(yytext); return _IDENT_;
\n  ++yy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return _ERROR_;
%%
int initialize_lexer(FILE *inp) { yyin = inp; BEGIN YYINITIAL; return 0; }
int yywrap(void) { return 1; }

